<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Title1" xml:space="preserve">
    <value>Integer Arithmetic</value>
  </data>
  <data name="Title10" xml:space="preserve">
    <value>Using ArgumentException and exception patterns</value>
  </data>
  <data name="Title11" xml:space="preserve">
    <value>For Loops</value>
  </data>
  <data name="Title12" xml:space="preserve">
    <value>While Loops</value>
  </data>
  <data name="Title13" xml:space="preserve">
    <value>Declaring a simple recursive function</value>
  </data>
  <data name="Title14" xml:space="preserve">
    <value>Basic Array Construction</value>
  </data>
  <data name="Title15" xml:space="preserve">
    <value>Basic Array Construction 2</value>
  </data>
  <data name="Title16" xml:space="preserve">
    <value>Using arrays</value>
  </data>
  <data name="Title17" xml:space="preserve">
    <value>Using System.Collections.Generic.Dictionary</value>
  </data>
  <data name="Title18" xml:space="preserve">
    <value>Using Tuples</value>
  </data>
  <data name="Title19" xml:space="preserve">
    <value>Basic List Construction</value>
  </data>
  <data name="Title20" xml:space="preserve">
    <value>Basic List Construction 2</value>
  </data>
  <data name="Title21" xml:space="preserve">
    <value>Lists and Pattern Matching</value>
  </data>
  <data name="Title22" xml:space="preserve">
    <value>Lists and 'map'</value>
  </data>
  <data name="Title23" xml:space="preserve">
    <value>Lists and Iteration</value>
  </data>
  <data name="Title24" xml:space="preserve">
    <value>Lists and Indexed Iteration</value>
  </data>
  <data name="Title25" xml:space="preserve">
    <value>Lists and Folding</value>
  </data>
  <data name="Title26" xml:space="preserve">
    <value>Lists and Filter</value>
  </data>
  <data name="Title27" xml:space="preserve">
    <value>Lists and Choose</value>
  </data>
  <data name="Title28" xml:space="preserve">
    <value>Simple options</value>
  </data>
  <data name="Title29" xml:space="preserve">
    <value>Using options for data</value>
  </data>
  <data name="Title3" xml:space="preserve">
    <value>Converting between numeric types</value>
  </data>
  <data name="Title30" xml:space="preserve">
    <value>Basic Construction</value>
  </data>
  <data name="Title31" xml:space="preserve">
    <value>Basic Iteration</value>
  </data>
  <data name="Title32" xml:space="preserve">
    <value>Using .iter</value>
  </data>
  <data name="Title33" xml:space="preserve">
    <value>Using .map</value>
  </data>
  <data name="Title34" xml:space="preserve">
    <value>Using .reduce</value>
  </data>
  <data name="Title35" xml:space="preserve">
    <value>Using .filter</value>
  </data>
  <data name="Title36" xml:space="preserve">
    <value>Using .choose</value>
  </data>
  <data name="Title37" xml:space="preserve">
    <value>Using Structural Equality</value>
  </data>
  <data name="Title38" xml:space="preserve">
    <value>Using Structural Hashing</value>
  </data>
  <data name="Title39" xml:space="preserve">
    <value>Basic Discriminated Unions</value>
  </data>
  <data name="Title4" xml:space="preserve">
    <value>Declaring and calling inner functions</value>
  </data>
  <data name="Title40" xml:space="preserve">
    <value>Discriminated Unions as Trees</value>
  </data>
  <data name="Title41" xml:space="preserve">
    <value>Basic Records</value>
  </data>
  <data name="Title42" xml:space="preserve">
    <value>More Basic Records</value>
  </data>
  <data name="Title43" xml:space="preserve">
    <value>Records with Members</value>
  </data>
  <data name="Title44" xml:space="preserve">
    <value>Mutual Definitions</value>
  </data>
  <data name="Title45" xml:space="preserve">
    <value>Enumerations</value>
  </data>
  <data name="Title46" xml:space="preserve">
    <value>Structs</value>
  </data>
  <data name="Title47" xml:space="preserve">
    <value>Constructing Classes</value>
  </data>
  <data name="Title48" xml:space="preserve">
    <value>Classes with methods and properties</value>
  </data>
  <data name="Title5" xml:space="preserve">
    <value>Declaring and calling inner functions</value>
  </data>
  <data name="Title50" xml:space="preserve">
    <value>Read Two Lines, .NET-style</value>
  </data>
  <data name="Title51" xml:space="preserve">
    <value>Read Entire File, .NET-style</value>
  </data>
  <data name="Title52" xml:space="preserve">
    <value>Read Entire CSV File, .NET-style</value>
  </data>
  <data name="Title53" xml:space="preserve">
    <value>Bitwise Integer Operations</value>
  </data>
  <data name="Title54" xml:space="preserve">
    <value>Using the Set type</value>
  </data>
  <data name="Title55" xml:space="preserve">
    <value>Using the Map type</value>
  </data>
  <data name="Title56" xml:space="preserve">
    <value>Using interfaces</value>
  </data>
  <data name="Title57" xml:space="preserve">
    <value>Lazily Enumerate CSV File</value>
  </data>
  <data name="Title58" xml:space="preserve">
    <value>Using the type provider sample</value>
  </data>
  <data name="Title59" xml:space="preserve">
    <value>TypeProvider query IN case</value>
  </data>
  <data name="Title6" xml:space="preserve">
    <value>Declaring and calling anonymous function lamda expressions</value>
  </data>
  <data name="Title60" xml:space="preserve">
    <value>TypeProvider query EXISTS case</value>
  </data>
  <data name="Title61" xml:space="preserve">
    <value>TypeProvider query GroupBy case</value>
  </data>
  <data name="Title62" xml:space="preserve">
    <value>TypeProvider query GroupBy and OrderBy DESC case</value>
  </data>
  <data name="Title63" xml:space="preserve">
    <value>TypeProvider query TOP case</value>
  </data>
  <data name="Title64" xml:space="preserve">
    <value>TypeProvider query LEFT JOIN case</value>
  </data>
  <data name="Title65" xml:space="preserve">
    <value>TypeProvider query COUNT case</value>
  </data>
  <data name="Title66" xml:space="preserve">
    <value>TypeProvider query DISTINCT case</value>
  </data>
  <data name="Title67" xml:space="preserve">
    <value>TypeProvider query DISTINCT COUNT case</value>
  </data>
  <data name="Title68" xml:space="preserve">
    <value>TypeProvider query TOP and Nullable case</value>
  </data>
  <data name="Title69" xml:space="preserve">
    <value>TypeProvider query UNION case</value>
  </data>
  <data name="Title7" xml:space="preserve">
    <value>Raising a 'Failure' exception</value>
  </data>
  <data name="Title70" xml:space="preserve">
    <value>TypeProvider query CASE</value>
  </data>
  <data name="Title8" xml:space="preserve">
    <value>Raising and catching a 'Failure' exception</value>
  </data>
  <data name="Title9" xml:space="preserve">
    <value>Using KeyNotFoundException and exception patterns</value>
  </data>
  <data name="Ttile2" xml:space="preserve">
    <value>Floating Point Arithmetic</value>
  </data>
  <data name="Ttile49" xml:space="preserve">
    <value>Basic Use Bindings</value>
  </data>
  <data name="TypeProvider.OData.Sample0" xml:space="preserve">
    <value>Use the OData service to access Azure data market data source</value>
  </data>
  <data name="TypeProvider.Others.Sample0" xml:space="preserve">
    <value>Use the resx type provider</value>
  </data>
</root>